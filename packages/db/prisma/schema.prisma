// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String              @id @default(cuid())
    clerkId            String              @unique
    stripeCustomerId   String?             @unique
    stripeSubscription StripeSubscription?

    currentStreak  Int              @default(0)
    longestStreak  Int              @default(0)
    lastActiveDate DateTime?
    preferences    UserPreferences?

    totalPoints Int @default(0)

    practiceSessions  PracticeSession[]
    purchasedItems    MarketplaceItem[]
    subjectsProgress  UserSubjectProgress[]
    initialAssessment InitialAssessmentSession?

    myCodes       InvitationCode[] @relation("creator")
    redeemedCodes InvitationCode[] @relation("redeemedBy")

    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    invitationCodeId String?
}

enum StripeSubscriptionStatus {
    active
    canceled
    incomplete
    incomplete_expired
    past_due
    paused
    trialing
    unpaid
}

model StripeSubscription {
    id                   String @id @default(cuid())
    stripeSubscriptionId String @unique

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    trialEndsAt DateTime
    status      StripeSubscriptionStatus @default(trialing)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum IdealGrade {
    SIX
    EIGHT
    TEN
}

model UserPreferences {
    id     String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    examDifficulty ExamDifficulty @default(M1)
    idealGrade     IdealGrade     @default(EIGHT)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model InvitationCode {
    id String @id @default(cuid())

    code        String  @unique
    description String?

    maxUses    Int?
    usesLeft   Int?
    validUntil DateTime?

    stripeCoupon String?
    isReferral   Boolean @default(false)

    creatorId  String
    creator    User   @relation("creator", fields: [creatorId], references: [id])
    redeemedBy User[] @relation("redeemedBy")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserSubjectProgress {
    id        String  @id @default(cuid())
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    subjectId String
    subject   Subject @relation(fields: [subjectId], references: [id])

    completedLessons  String[]
    completedProblems CompletedProblem[]

    masteryLevel Float @default(0.0) // 0.0 - 1.0

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, subjectId])
}

model CompletedProblem {
    id                    String              @id @default(cuid())
    problemId             String
    problem               Problem             @relation(fields: [problemId], references: [id])
    userSubjectProgressId String
    userSubjectProgress   UserSubjectProgress @relation(fields: [userSubjectProgressId], references: [id])

    completedAt DateTime @default(now())

    @@unique([userSubjectProgressId, problemId])
}

model Lesson {
    id    String @id @default(cuid())
    title String
    slug  String @unique

    subjects Subject[]

    subjectCategoryId String
    subjectCategory   SubjectCategory @relation(fields: [subjectCategoryId], references: [id])
    order             Int             @default(0)

    legacyContent LessonLegacyContent?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model LessonLegacyContent {
    id       String @id @default(cuid())
    html     String
    raw      String
    lessonId String @unique
    lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model SubjectCategory {
    id   String @id @default(cuid())
    name String
    slug String @unique

    order   Int     @default(0)
    enabled Boolean @default(true)

    subjects Subject[]
    lessons  Lesson[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subject {
    id   String @id @default(cuid())
    name String
    slug String @unique

    order   Int     @default(0)
    enabled Boolean @default(true)

    category   SubjectCategory @relation(fields: [categoryId], references: [id])
    categoryId String

    prerequisites Subject[] @relation("SubjectPrerequisites")
    requiredBy    Subject[] @relation("SubjectPrerequisites")

    lessons  Lesson[]
    problems Problem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    practiceSessions PracticeSession[]
    usersProgress    UserSubjectProgress[]
}

enum ProblemType {
    MULTIPLE_CHOICE
    SINGLE_ANSWER
    MULTIPLE_VARIABLES
}

model Problem {
    id       String      @id @default(cuid())
    type     ProblemType
    subjects Subject[]
    legacyId String?

    description String
    source      String @default("archive")
    difficulty  Int    @default(1)

    // Problem Type = MULTIPLE_CHOICE
    multipleChoiceOptions MultipleChoiceOption[]

    // Problem Type = SINGLE_ANSWER
    singleAnswer SingleAnswer?

    // Problem Type = MULTIPLE_VARIABLES
    variables ProblemVariable[]

    mathSymbolButtons MathSymbolButton[]

    hints                ProblemHint[]
    explanation          ProblemExplanation @relation(fields: [problemExplanationId], references: [id])
    problemExplanationId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    practiceProblemInstances PracticeProblem[]
    CompletedProblem         CompletedProblem[]
    AssessmentQuestion       AssessmentQuestion[]
}

model MultipleChoiceOption {
    id        String  @id @default(cuid())
    text      String
    isCorrect Boolean

    problem   Problem @relation(fields: [problemId], references: [id])
    problemId String
}

model SingleAnswer {
    id            String  @id @default(cuid())
    correctAnswer String
    problem       Problem @relation(fields: [problemId], references: [id])
    problemId     String  @unique
}

model ProblemVariable {
    id            String  @id @default(cuid())
    variableName  String
    correctAnswer String
    problem       Problem @relation(fields: [problemId], references: [id])
    problemId     String
}

model ProblemHint {
    id      String @id @default(cuid())
    content String
    order   Int    @default(0)

    problem   Problem @relation(fields: [problemId], references: [id])
    problemId String
}

model ProblemExplanation {
    id      String @id @default(cuid())
    content String

    problem Problem[]
}

model MathSymbolButton {
    id     String @id @default(cuid())
    symbol String @unique
    latex  String

    problems Problem[]
}

model PracticeSession {
    id        String  @id @default(cuid())
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    subjectId String
    subject   Subject @relation(fields: [subjectId], references: [id])

    score        Int
    pointsEarned Int

    // Correct answers / Total problems
    performanceScore Float @default(0.0) // 0.0 - 1.0

    problems PracticeProblem[]

    createdAt DateTime @default(now())
}

model PracticeProblem {
    id                String          @id @default(cuid())
    practiceSessionId String
    practiceSession   PracticeSession @relation(fields: [practiceSessionId], references: [id])
    problemId         String
    problem           Problem         @relation(fields: [problemId], references: [id])

    userAnswer String?
    isCorrect  Boolean

    createdAt DateTime @default(now())
}

model MarketplaceItem {
    id          String @id @default(cuid())
    name        String
    description String
    pointCost   Int

    purchasedBy User[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ExamDifficulty {
    M1
    M2
    M3
}

enum ExamProfile {
    M_mate_info
    M_st_nat
    M_tehnologic
    M_pedagogic
}

enum ExamType {
    SIMULARE
    MODEL
    SUBIECT
    SUBIECT_OFICIAL
}

model Exam {
    id         String         @id @default(cuid())
    difficulty ExamDifficulty
    profile    ExamProfile

    type          ExamType?
    year          Int?
    month         String?
    variantNumber Int?

    slug  String @unique
    title String

    problems ExamProblem[] @relation("ExamProblems") // Relation to problems

    examSourceFiles ExamSourceFiles?
}

enum ExamProblemCategory {
    SUB1
    SUB2
    SUB3
}

enum ExamSubproblemCategory {
    A
    B
    C
}

model ExamProblemOfficialSolutionStep {
    id String @id @default(cuid())

    examProblem   ExamProblem @relation(fields: [examProblemId], references: [id])
    examProblemId String

    stepNumber Int
    content    String
    points     Int
}

model ExamProblem {
    id String @id @default(cuid())

    exam   Exam   @relation("ExamProblems", fields: [examId], references: [id])
    examId String

    category    ExamProblemCategory?
    subcategory ExamSubproblemCategory?
    order       Int                     @default(0)

    description String
    points      Int

    officialSolutionSteps ExamProblemOfficialSolutionStep[]

    subproblems ExamProblem[] @relation("ExamSubproblems")
    parent      ExamProblem?  @relation("ExamSubproblems", fields: [parentId], references: [id])
    parentId    String?

    @@index([category, subcategory, order])
}

model InitialAssessmentSession {
    id             String               @id @default(cuid())
    userId         String               @unique
    user           User                 @relation(fields: [userId], references: [id])
    questions      AssessmentQuestion[]
    totalQuestions Int                  @default(15)
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @updatedAt
}

model AssessmentQuestion {
    id                         String                   @id @default(cuid())
    initialAssessmentSessionId String
    initialAssessmentSession   InitialAssessmentSession @relation(fields: [initialAssessmentSessionId], references: [id])
    problemId                  String
    problem                    Problem                  @relation(fields: [problemId], references: [id])
    userAnswer                 String?
    isCorrect                  Boolean
    createdAt                  DateTime                 @default(now())
}

model ExamSourceFiles {
    id String @id @default(cuid())

    exam   Exam   @relation(fields: [examId], references: [id])
    examId String @unique

    examPdfUrl String
    examMD     String

    solutionPdfUrl String
    solutionMD     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
